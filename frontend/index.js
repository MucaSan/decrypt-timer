// this is just a method created for testing the read file
async function fetchJsonFile(){
    // this res variable corresponds to the response of the try and catch handling exceptions
    try{
        // tries to fetch the JSON data that is stored in the localhost server
        res = await fetch('http://127.0.0.1:5500/frontend/json/algorithms.json');
        if (!res.ok){
            throw new Error("HTTPS error! Status: ${res.status}");
        }
        return res.json();
    } catch(error){
        throw new Error("HTTP request couldn't fetch from algorithms.json file AND/OR file doesn't exist anymore.");
    }
}
async function inputDropButtonData(){
    // fetch the data, and use the await keyword to automatically make the promise interactable
    const data = await fetchJsonFile();
    // create DOM object for interacting with select button
    const btnDropDown = document.querySelector("#btnDropDown");
    // log the JSON content to the browser
    console.log("JSON FILE loaded sucessfully \n " + data["algorithms"]);
    // create objects and instance them on the select HTML element
    setDropButtonList(data,btnDropDown);
}
// adds the objects to the select HTML item
function setDropButtonList(data,btnDropDown){
    var i = data["algorithms"].length;
    var j = 0;
    while(j < i){
        createObjectOption(btnDropDown, data["algorithms"][j]);
        j++;
    }
}
// customizes the creation of the DOM objects
function createObjectOption(btnDropButton, optionName){
    var option = document.createElement('option');
    option.value = optionName;
    option.innerHTML = optionName; 
    btnDropButton.appendChild(option);
}
// hides the key label and key input
function hideKeys(){
    document.querySelectorAll(".input-keys").forEach(element => {
        element.style.display="none";
    });
}
// shows the key label and key input
function showKeys(){
   document.querySelectorAll(".input-keys").forEach(element => {
     element.style.display="flex";
   });
}
// verifies each options, after the event logger has been set
function verifyOption(){
    var drop = document.querySelector("#btnDropDown");
    console.log("The selected algorithm is: " + drop.value);
    if (drop.value.includes("AES")){
        hideKeys();
        return;
    }
    showKeys();
}
document.addEventListener("DOMContentLoaded", inputDropButtonData);
document.querySelector("#btnDropDown").addEventListener("change", verifyOption);

// the index JS should change accodingly to which algorithm has been chosen.

/* 
Consider that in this script, probably many details will be left behind, however, the details of the string size of the keys should 
be taken under consideration, as it'll affect how the API developed in Java will process this. 

AES - Won't need the secret key, as it'll be generated by the API on the proccess. (No KEY Input)
Blowfish - Will need the input of a secret (Has KEY input)
3DES - Will need the input of a secret (Has KEY input, and size should be exactly 24 characters, no more, no less)
Caesar - Will need the input of a secret (Has KEY input and size should be exactly 1 character, no more, no less)
Vig√®nere - Will need the input of a secret (Has KEY input)
*/




